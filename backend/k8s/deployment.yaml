apiVersion: apps/v1
kind: Deployment
metadata:
  name: avnu-backend
  labels:
    app: avnu-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: avnu-backend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: avnu-backend
    spec:
      containers:
      - name: avnu-backend
        image: avnu/marketplace-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: avnu-db-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: avnu-db-credentials
              key: port
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: avnu-db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: avnu-db-credentials
              key: password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: avnu-db-credentials
              key: database
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: avnu-config
              key: redis-host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: avnu-config
              key: redis-port
        - name: ELASTICSEARCH_NODE
          valueFrom:
            configMapKeyRef:
              name: avnu-config
              key: elasticsearch-url
        - name: ELASTICSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              name: avnu-es-credentials
              key: username
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: avnu-es-credentials
              key: password
        - name: SEARCH_CACHE_ENABLED
          value: "true"
        - name: SEARCH_CACHE_TTL
          value: "300"
        - name: SEARCH_EXPERIMENTS_ENABLED
          value: "true"
        - name: SEARCH_MONITORING_ENABLED
          value: "true"
        - name: SEARCH_ENABLE_SYNONYMS
          value: "true"
        - name: SEARCH_ENABLE_SEMANTIC
          value: "true"
        - name: SEARCH_ENABLE_QUERY_EXPANSION
          value: "true"
        - name: SEARCH_ENABLE_ENTITY_RECOGNITION
          value: "true"
        - name: SEARCH_PERFORMANCE_WARNING_THRESHOLD
          value: "500"
        - name: SEARCH_PERFORMANCE_CRITICAL_THRESHOLD
          value: "1000"
        - name: LOG_LEVEL
          value: "info"
---
apiVersion: v1
kind: Service
metadata:
  name: avnu-backend
spec:
  selector:
    app: avnu-backend
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: avnu-backend
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
spec:
  tls:
  - hosts:
    - api.avnu.marketplace
    secretName: avnu-backend-tls
  rules:
  - host: api.avnu.marketplace
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: avnu-backend
            port:
              number: 80
