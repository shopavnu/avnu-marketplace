name: av | nu Marketplace Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      - name: Run linting
        working-directory: ./backend
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: avnu
          POSTGRES_PASSWORD: avnu_password
          POSTGRES_DB: avnu_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
          xpack.security.enabled: false
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      - name: Run unit tests
        working-directory: ./backend
        run: npm run test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: avnu
          DB_PASSWORD: avnu_password
          DB_NAME: avnu_test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          ELASTICSEARCH_NODE: http://localhost:9200
          SEARCH_CACHE_ENABLED: true
          SEARCH_CACHE_TTL: 300
          SEARCH_EXPERIMENTS_ENABLED: true
          SEARCH_MONITORING_ENABLED: true
          LOG_LEVEL: error
      - name: Run e2e tests
        working-directory: ./backend
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: avnu
          DB_PASSWORD: avnu_password
          DB_NAME: avnu_test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          ELASTICSEARCH_NODE: http://localhost:9200
          SEARCH_CACHE_ENABLED: true
          SEARCH_CACHE_TTL: 300
          SEARCH_EXPERIMENTS_ENABLED: true
          SEARCH_MONITORING_ENABLED: true
          LOG_LEVEL: error

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      - name: Build
        working-directory: ./backend
        run: npm run build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            avnu/marketplace-backend:latest
            avnu/marketplace-backend:${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/avnu-marketplace
            docker-compose pull backend
            docker-compose up -d backend

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/avnu-marketplace
            docker-compose pull backend
            docker-compose up -d backend
