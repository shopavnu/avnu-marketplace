import { Repository } from 'typeorm';
import { Order } from '../entities/order.entity';
import { CreateOrderDto } from '../dto/create-order.dto';
import { UpdateOrderDto } from '../dto/update-order.dto';
import { OrderItem } from '../entities/order-item.entity';
import { OrderStatus, SyncStatus, PaymentStatus } from '../enums';
export declare class OrdersService {
  private readonly orderRepository;
  private readonly orderItemRepository;
  private readonly logger;
  constructor(orderRepository: Repository<Order>, orderItemRepository: Repository<OrderItem>);
  create(createOrderDto: CreateOrderDto): Promise<Order>;
  findAll(filters?: Partial<Order>): Promise<Order[]>;
  findByUserId(userId: string): Promise<Order[]>;
  findByCustomer(customerId: string, pagination?: any): Promise<Order[]>;
  findByMerchant(merchantId: string, pagination?: any): Promise<Order[]>;
  findByStatus(status: OrderStatus): Promise<Order[]>;
  findPendingSync(): Promise<Order[]>;
  findOne(id: string): Promise<Order>;
  update(id: string, updateOrderDto: UpdateOrderDto): Promise<Order>;
  updateStatus(id: string, status: OrderStatus): Promise<Order>;
  updatePaymentStatus(id: string, paymentStatus: PaymentStatus): Promise<Order>;
  updateFulfillmentStatus(id: string, fulfillmentStatus: string): Promise<Order>;
  cancelOrder(id: string, reason?: string): Promise<Order>;
  refundOrder(id: string, amount?: number, reason?: string): Promise<Order>;
  syncWithPlatform(id: string): Promise<Order>;
  private syncWithShopify;
  private syncWithWooCommerce;
  updateSyncStatus(id: string, syncStatus: SyncStatus): Promise<Order>;
  addNote(id: string, note: string): Promise<Order>;
  updatePriority(id: string, isPriority: boolean): Promise<Order>;
  remove(id: string): Promise<void>;
  hardDelete(id: string): Promise<void>;
}
