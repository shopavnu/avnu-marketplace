import { useRouter } from 'next/router';
import { useQuery } from '@apollo/client';
import { gql } from '@apollo/client';
import { useState } from 'react';
import SearchBarWithSuggestions from '@/components/search/SearchBarWithSuggestions';

// Define the GraphQL query for product details
const GET_PRODUCT = gql`
  query GetProduct($id: ID!) {
    product(id: $id) {
      id
      title
      description
      price
      imageUrl
      category
      seller {
        id
        name
      }
      relatedProducts {
        id
        title
        imageUrl
        price
      }
    }
  }
`;

interface ProductSeller {
  id: string;
  name: string;
}

interface RelatedProduct {
  id: string;
  title: string;
  imageUrl: string;
  price: number;
}

interface Product {
  id: string;
  title: string;
  description: string;
  price: number;
  imageUrl: string;
  category: string;
  seller: ProductSeller;
  relatedProducts: RelatedProduct[];
}

interface ProductData {
  product: Product;
}

export default function ProductPage() {
  const router = useRouter();
  const { id } = router.query;
  const [searchQuery, setSearchQuery] = useState('');
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  
  // Load recent searches from localStorage
  useState(() => {
    const savedSearches = localStorage.getItem('recentSearches');
    if (savedSearches) {
      try {
        const parsedSearches = JSON.parse(savedSearches);
        setRecentSearches(Array.isArray(parsedSearches) ? parsedSearches : []);
      } catch (error) {
        console.error('Failed to parse recent searches:', error);
      }
    }
  });

  const { data, loading, error } = useQuery<ProductData>(GET_PRODUCT, {
    variables: { id },
    skip: !id,
  });

  const handleSearch = (query: string) => {
    if (!query.trim()) return;
    
    // Save to recent searches
    const updatedSearches = [query, ...recentSearches.filter(s => s !== query)].slice(0, 5);
    setRecentSearches(updatedSearches);
    localStorage.setItem('recentSearches', JSON.stringify(updatedSearches));
    
    // Navigate to search results page
    router.push(`/search?q=${encodeURIComponent(query)}`);
  };

  const product = data?.product;

  return (
    <div className="min-h-screen bg-warm-white">
      {/* Search Header */}
      <div className="bg-white shadow-sm py-4 sticky top-0 z-10">
        <div className="container mx-auto px-4">
          <SearchBarWithSuggestions
            value={searchQuery}
            onChange={setSearchQuery}
            onSearch={handleSearch}
            recentSearches={recentSearches}
            placeholder="Search products, brands, or categories..."
            className="max-w-2xl mx-auto"
          />
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        {/* Loading State */}
        {loading && (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-sage"></div>
          </div>
        )}

        {/* Error State */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
            <p>Sorry, we couldn't find this product. Please try another one.</p>
            <button 
              className="mt-2 text-red-700 underline"
              onClick={() => router.push('/')}
            >
              Go back to homepage
            </button>
          </div>
        )}

        {/* Product Details */}
        {product && (
          <div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Product Image */}
              <div className="bg-white rounded-xl overflow-hidden shadow-md">
                {product.imageUrl ? (
                  <img
                    src={product.imageUrl}
                    alt={product.title}
                    className="w-full h-auto object-cover aspect-square"
                  />
                ) : (
                  <div className="w-full aspect-square flex items-center justify-center bg-neutral-gray/10">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth={1.5}
                      stroke="currentColor"
                      className="w-16 h-16 text-neutral-gray/30"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z"
                      />
                    </svg>
                  </div>
                )}
              </div>

              {/* Product Info */}
              <div>
                <div className="mb-6">
                  <div className="text-sm text-sage font-medium mb-2">{product.category}</div>
                  <h1 className="text-3xl font-montserrat font-medium text-charcoal mb-4">{product.title}</h1>
                  <p className="text-2xl font-medium text-charcoal mb-4">${product.price.toFixed(2)}</p>
                  <p className="text-neutral-gray mb-6">{product.description}</p>
                  
                  <div className="mb-6">
                    <p className="text-sm text-neutral-gray mb-1">Sold by</p>
                    <p className="font-medium">{product.seller.name}</p>
                  </div>

                  <button className="w-full bg-sage text-white py-3 px-6 rounded-lg hover:bg-opacity-90 transition-colors font-medium">
                    Add to Cart
                  </button>
                </div>
              </div>
            </div>

            {/* Related Products */}
            {product.relatedProducts && product.relatedProducts.length > 0 && (
              <div className="mt-12">
                <h2 className="text-2xl font-montserrat font-medium text-charcoal mb-6">Related Products</h2>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                  {product.relatedProducts.map((relatedProduct) => (
                    <div 
                      key={relatedProduct.id}
                      className="bg-white rounded-xl shadow-sm overflow-hidden hover:shadow-md transition-shadow cursor-pointer"
                      onClick={() => router.push(`/product/${relatedProduct.id}`)}
                    >
                      <div className="aspect-square bg-warm-white relative overflow-hidden">
                        {relatedProduct.imageUrl ? (
                          <img
                            src={relatedProduct.imageUrl}
                            alt={relatedProduct.title}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center bg-neutral-gray/10">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              fill="none"
                              viewBox="0 0 24 24"
                              strokeWidth={1.5}
                              stroke="currentColor"
                              className="w-12 h-12 text-neutral-gray/30"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z"
                              />
                            </svg>
                          </div>
                        )}
                      </div>
                      <div className="p-4">
                        <h3 className="font-medium text-charcoal mb-1 line-clamp-1">{relatedProduct.title}</h3>
                        <p className="font-medium text-charcoal">${relatedProduct.price.toFixed(2)}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
