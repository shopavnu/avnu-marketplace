name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      # Add PostgreSQL service for testing
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: avnu_test
        ports:
          - 5432:5432
        # Provide health check to ensure PostgreSQL is available before tests run
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ensure npm cache directory exists
        run: mkdir -p ~/.npm

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.18.0'
          cache: 'npm'
          
      # Create global .npmrc with relaxed settings
      - name: Create .npmrc
        run: |
          echo "better-sqlite3_binary=true" > .npmrc
          echo "sqlite3_binary=true" >> .npmrc
          echo "multer@=\"2.0.1\"" >> .npmrc
          echo "legacy-peer-deps=true" >> .npmrc
          echo "engine-strict=false" >> .npmrc
          echo "package-lock=false" >> .npmrc
          cat .npmrc

      # Fix multer references directly in files
      - name: Fix multer references in Nest.js dependencies
        run: |
          # Fix backend package.json
          cd backend
          if [ -f "package.json" ]; then
            echo "Fixing backend package.json"
            # Replace any direct multer 2.0.0 references with 2.0.1
            sed -i 's/"multer":\s*"2\.0\.0"/"multer": "2.0.1"/g' package.json
            # Add multer resolution
            node -e "const fs=require('fs'); 
                    const pkg=JSON.parse(fs.readFileSync('package.json')); 
                    pkg.dependencies=pkg.dependencies||{}; 
                    pkg.dependencies.multer='2.0.1'; 
                    pkg.resolutions=pkg.resolutions||{}; 
                    pkg.resolutions.multer='2.0.1'; 
                    fs.writeFileSync('package.json', JSON.stringify(pkg,null,2));"
            cat package.json | grep multer || echo "No multer reference found"
          fi
          
          # Find and fix @nestjs/platform-express package.json
          NESTJS_PATH=$(find ../node_modules -path "*/@nestjs/platform-express/package.json" 2>/dev/null || echo "")
          if [ -n "$NESTJS_PATH" ] && [ -f "$NESTJS_PATH" ]; then
            echo "Found Nest.js platform express at $NESTJS_PATH"
            # Replace multer 2.0.0 with 2.0.1
            sed -i 's/"multer":\s*"2\.0\.0"/"multer": "2.0.1"/g' "$NESTJS_PATH"
            cat "$NESTJS_PATH" | grep multer || echo "No multer reference found in $NESTJS_PATH"
          else
            echo "Nest.js platform express not found"
          fi

      # Update package-lock.json files to ensure consistency
      - name: Update lock files for multer
        run: |
          for lockfile in $(find . -name "package-lock.json"); do
            echo "Processing $lockfile"
            if [ -f "$lockfile" ]; then
              # Replace multer 2.0.0 with 2.0.1 in lock files
              sed -i 's/"multer":\s*"2\.0\.0"/"multer": "2.0.1"/g' "$lockfile"
              sed -i 's/"version":\s*"2\.0\.0"/"version": "2.0.1"/g' "$lockfile"
              echo "Updated $lockfile"
            fi
          done

      # Use npm install instead of npm ci for backend
      - name: Install backend dependencies
        run: |
          cd backend
          echo "Installing backend dependencies with npm install"
          npm install --no-package-lock

      # Use npm install instead of npm ci for frontend
      - name: Install frontend dependencies
        run: |
          cd frontend
          echo "Installing frontend dependencies with npm install"
          npm install --no-package-lock

      - name: Generate Prisma Client
        run: npx prisma generate
        working-directory: ./backend

      - name: Fix linting issues
        run: npm run lint -- --fix || true
        working-directory: ./backend

      - name: Migrate DB
        run: npx prisma migrate deploy
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/avnu_test

      - name: Debug DATABASE_URL and Test Connection
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/avnu_test
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
        run: |
          echo "DATABASE_URL for debug is: $DATABASE_URL"
          echo "Attempting psql connection..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d avnu_test -c "SELECT 1;" || echo "psql command failed, client might not be installed or DB not accessible."
        working-directory: ./backend

      - name: Run backend tests
        run: npm test
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/avnu_test
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

      - name: Build backend
        run: npm run build
        working-directory: ./backend

      - name: Run frontend tests
        run: npm test
        working-directory: ./frontend

      - name: Build frontend
        run: npm run build
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
