name: Docker Build and Push

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  OWNER: shopavnu

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-frontend
            ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-backend
            ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-worker

      - name: Set short SHA
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Build and push Frontend image
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./frontend/Dockerfile
          build-args: |
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-frontend:${{ steps.vars.outputs.SHORT_SHA }}
            ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-frontend:latest
          no-cache: true # Disable all caching for this build step
          # cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-frontend:buildcache
          # cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-frontend:buildcache,mode=max

      # Build and push Backend image
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-backend:${{ steps.vars.outputs.SHORT_SHA }}
            ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-backend:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-backend:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-backend:buildcache,mode=max

      # Build and push Worker image
      - name: Build and push Worker Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile.worker
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-worker:${{ steps.vars.outputs.SHORT_SHA }}
            ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-worker:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-worker:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-worker:buildcache,mode=max
      
      # Update deployment
      - name: Set image tags in Render deployment
        if: github.event_name != 'pull_request'
        run: |
          echo "Updating Render deployment with image tags:"
          echo "Frontend: ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-frontend:${{ steps.vars.outputs.SHORT_SHA }}"
          echo "Backend: ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-backend:${{ steps.vars.outputs.SHORT_SHA }}"
          echo "Worker: ${{ env.REGISTRY }}/${{ env.OWNER }}/avnu-worker:${{ steps.vars.outputs.SHORT_SHA }}"
          # This part would call Render API to update the deployment
          # You'll need to implement this based on Render's API documentation
